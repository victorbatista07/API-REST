"use strict";

var _benchmark = require("benchmark");

var _benchmark2 = _interopRequireDefault(_benchmark);

var _index = require("../lib/index");

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable */
var mapper = (0, _index2.default)().map("fieldName").to("field.name").map("fieldId").to("field.id").map(["fieldName", "fieldId"]).to("merged", function (name, id) {
  name + "-" + id;
});

var source = {
  fieldName: "my name",
  fieldId: "abc"
};

mapper.execute(source);

var suite = new _benchmark2.default.Suite();

// add tests
suite.add("map and run", function () {
  var map = (0, _index2.default)();

  map("fieldName").to("field.name", function (value) {
    return value;
  });
  map("fieldId").to("field.id", function (value) {
    return value;
  });
  map(["fieldName", "fieldId"]).to("merged", function (name, id) {
    name + "-" + id;
  });

  map.execute(source);
})
// .add("using arrayMaps with old code", () => {
//   arrayFromExistingMode.execute(source);
// })
// .add("using arrayMaps with new code", () => {
//   arrayFromExperimentMode.execute(source);
// })
// .add("using experiment", () => {
//   experimentMode.execute(source);
// })
.add("just wrapping object-mapper", function () {
  mapper.execute(source);
})
// add listeners
.on("cycle", function (event) {
  console.log(String(event.target));
}).on("complete", function (result) {
  console.log(suite["0"].name, suite["0"].count, suite["0"].times);
  console.log(suite["1"].name, suite["1"].count, suite["1"].times);
})
// run async
.run({ "async": false });
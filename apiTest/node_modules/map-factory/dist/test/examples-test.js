"use strict";

var _code = require("code");

var _lab = require("lab");

var Lab = _interopRequireWildcard(_lab);

var _labTesting = require("lab-testing");

var _labTesting2 = _interopRequireDefault(_labTesting);

var _assert = require("assert");

var _assert2 = _interopRequireDefault(_assert);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var lab = exports.lab = Lab.script();
var testing = (0, _labTesting2.default)(lab);
var group = testing.createExperiment("map-factory");

var createMapper = require("../lib/index");
var getValue = createMapper.getValue,
    setValue = createMapper.setValue;


group("examples", function () {

  lab.test("Map a source field to the same object structure", function () {

    var expected = {
      "fieldName": "name1",
      "fieldId": "123"
    };

    // Start example

    var source = {
      "fieldName": "name1",
      "fieldId": "123",
      "fieldDescription": "description"
    };

    var map = createMapper();

    map("fieldName");
    map("fieldId");

    var result = map.execute(source);

    // End example

    (0, _code.expect)(result).to.equal(expected);
  });

  lab.test("Map a source field to a different object structure", function () {

    var expected = {
      "field": {
        "name": "name1",
        "id": "123"
      }
    };

    // Start example

    var source = {
      "fieldName": "name1",
      "fieldId": "123",
      "fieldDescription": "description"
    };

    var map = createMapper();

    map("fieldName").to("field.name");
    map("fieldId").to("field.id");

    var result = map.execute(source);

    // End example

    (0, _code.expect)(result).to.equal(expected);
  });

  lab.test("Supports deep references for source and target objects", function () {

    var expected = {
      user: {
        login: "john@someplace.com",
        accountId: "abc123",
        entitlements: ["game-1", "game-2"]
      }
    };

    // Start example

    var source = {
      "person": {
        "name": "John",
        "email": "john@someplace.com",
        "phone": "(712) 123 4567"
      },
      "account": {
        "id": "abc123",
        "entitlements": [{
          "id": 1,
          "name": "game-1"
        }, {
          "id": 2,
          "name": "game-2"
        }]
      }
    };

    var map = createMapper();

    map("person.email").to("user.login");
    map("account.id").to("user.accountId");
    map("account.entitlements[].name").to("user.entitlements");

    var result = map.execute(source);

    // End example

    (0, _code.expect)(result).to.equal(expected);
  });

  lab.test("You can also reference specific items in an array", function () {

    var expected = {
      "topStory": {
        "id": 1,
        "title": "Top Article",
        "author": "Joe Doe",
        "body": "..."
      }
    };

    // Start example

    var source = {
      "articles": [{
        "id": 1,
        "title": "Top Article",
        "author": "Joe Doe",
        "body": "..."
      }, {
        "id": 2,
        "title": "Second Article",
        "author": "Joe Doe",
        "body": "..."
      }]
    };

    var map = createMapper();

    map("articles[0]").to("topStory");

    var result = map.execute(source);

    // End example

    (0, _code.expect)(result).to.equal(expected);
  });

  lab.test("provides the each() method to help work with arrays and multiple mappers", function () {
    var source = {
      one: [{ value: "a", drop: "me" }, { value: "b", drop: "me" }, { value: "c", drop: "me" }],
      two: [{ value: "a", drop: "me" }, { value: "b", drop: "me" }, { value: "c", drop: "me" }],
      three: [{ value: "a", drop: "me" }, { value: "b", drop: "me" }, { value: "c", drop: "me" }]
    };

    var expected = {
      one: [{ item: "a" }, { item: "b" }, { item: "c" }],
      two: [{ item: "a" }, { item: "b" }, { item: "c" }],
      three: [{ item: "a" }, { item: "b" }, { item: "c" }]
    };

    var mainMapper = createMapper();
    var childMapper = createMapper();

    childMapper.map("value").to("item");

    mainMapper.map("one").to("one", function (array) {
      return childMapper.each(array);
    }).map("two").to("two", function (array) {
      return childMapper.each(array);
    }).map("three").to("three", function (array) {
      return childMapper.each(array);
    });

    var actual = mainMapper.execute(source);

    (0, _code.expect)(actual).to.equal(expected);
  });

  lab.test("More complicated transformations can be handled by providing a function", function () {

    var expected = {
      "topStory": {
        "id": 1,
        "title": "Top Article",
        "author": "Joe Doe",
        "body": "..."
      },
      "otherStories": [{
        "id": 2,
        "title": "Second Article",
        "author": "Joe Doe",
        "body": "..."
      }]
    };

    // Start example

    var source = {
      "articles": [{
        "id": 1,
        "title": "Top Article",
        "author": "Joe Doe",
        "body": "..."
      }, {
        "id": 2,
        "title": "Second Article",
        "author": "Joe Doe",
        "body": "..."
      }]
    };

    var map = createMapper();

    map("articles[0]").to("topStory");
    map("articles").to("otherStories", function (articles) {

      // We don't want to include the top story
      articles.shift();

      return articles;
    });

    var result = map.execute(source);

    // End example

    (0, _code.expect)(result).to.equal(expected);
  });

  lab.test("An existing object can be provided as the target object", function () {

    var expected = {
      "field": {
        "name": "name1",
        "id": "123"
      },
      "existing": "data"
    };

    // Start example

    var source = {
      "fieldName": "name1",
      "fieldId": "123",
      "fieldDescription": "description"
    };

    var destination = {
      "existing": "data"
    };

    var map = createMapper();

    map("fieldName").to("field.name");
    map("fieldId").to("field.id");

    var result = map.execute(source, destination);

    // End example

    (0, _code.expect)(result).to.equal(expected);
  });

  lab.test("Select from multiple sources at once", function () {

    var expected = {
      "fruit": {
        "count": 7
      }
    };

    // Start example

    var source = {
      "apples": {
        "count": 3
      },
      "oranges": {
        "count": 4
      }
    };

    var map = createMapper();

    map(["apples.count", "oranges.count"]).to("fruit.count", function (appleCount, orangeCount) {

      return appleCount + orangeCount;
    });

    var result = map.execute(source);

    // End example

    (0, _code.expect)(result).to.equal(expected);
  });

  lab.test("Create a single transform mapping object which is used to map all of your data together", function () {

    var expected = {
      "blog": {
        "post": {
          "text": "<p>Some Text</p>",
          "comments": ["not too bad", "pretty good", "awful"],
          "topComment": "not too bad"
        },
        "author": {
          "id": 123,
          "name": "John Doe",
          "email": "john.doe@nobody.com"
        }
      }
    };

    // Start example

    // assume the following inputs
    var post = {
      "body": "<p>Some Text</p>"
    };

    var comments = {
      "list": ["not too bad", "pretty good", "awful"]
    };

    var user = {
      "id": 123,
      "name": "John Doe",
      "email": "john.doe@nobody.com"
    };

    // combine multiple objects into a single source object
    var source = { post: post, comments: comments, user: user };

    var map = createMapper();

    map("post.body").to("blog.post.text");
    map("comments.list").to("blog.post.comments");
    map("comments.list[0]").to("blog.post.topComment");
    map("user.id").to("blog.author.id");
    map("user.name").to("blog.author.name");
    map("user.email").to("blog.author.email");

    var final = map.execute(source);

    // End example

    (0, _code.expect)(final).to.equal(expected);
  });

  lab.test("Or use multiple mappers and chain them together", function () {
    var expected = {
      "blog": {
        "post": {
          "text": "<p>Some Text</p>",
          "comments": ["not too bad", "pretty good", "awful"],
          "topComment": "not too bad"
        },
        "author": {
          "id": 123,
          "name": "John Doe",
          "email": "john.doe@nobody.com"
        }
      }
    };

    // Start Example

    // assume the following inputs
    var post = {
      "body": "<p>Some Text</p>"
    };

    var comments = {
      "list": ["not too bad", "pretty good", "awful"]
    };

    var user = {
      "id": 123,
      "name": "John Doe",
      "email": "john.doe@nobody.com"
    };

    var postMapper = createMapper();
    var commentMapper = createMapper();
    var authorMapper = createMapper();

    postMapper.map("body").to("blog.post.text");

    commentMapper.map("list").to("blog.post.comments").map("list[0]").to("blog.post.topComment");

    authorMapper.map("id").to("blog.author.id").map("name").to("blog.author.name").map("email").to("blog.author.email");

    var result = postMapper.execute(post);
    result = commentMapper.execute(comments, result);
    result = authorMapper.execute(user, result);

    // End example

    (0, _code.expect)(result).to.equal(expected);
  });

  lab.test("The or() method example", function () {

    var source = {
      "leasee": "Mr. Man"
    };

    var expected = {
      "occupier": "Mr. Man"
    };

    var map = createMapper();

    map("occupier").or("leasee").or("tenant").to("occupier");

    var result = map.execute(source);

    (0, _code.expect)(result).to.equal(expected);
  });

  lab.test("getValue example", function () {

    //    const { getValue, setValue } = require("map-factory");

    var obj = {
      my: {
        deep: {
          value: "here"
        }
      }
    };

    var value = getValue(obj, "my.deep.value");
    (0, _code.expect)(value).to.equal("here");
  });

  lab.test("setValue example", function () {

    var expected = {
      my: {
        example: {
          set: "done"
        }
      }
    };

    var actual = setValue({}, "my.example.set", "done");
    (0, _code.expect)(actual).to.equal(expected);
  });
});

group("example - cheatsheet", function () {

  lab.test("cheatsheet", function () {

    var source = {
      my: {
        deep: {
          object: { name: "john" },
          value: "abc",
          array: [{ value: 1 }, { value: 2 }, { value: 3 }]
        },
        other: {
          array: [4, 5, 6]
        }
      }
    };

    var mapper = createMapper();

    mapper.map("my.deep.value").to("example.basic.value").map("my.deep.object").to("example.basic.object").map("my.deep.array[0]").to("example.arrays.first").map("my.deep.array").to("example.arrays.items").map("my.deep.array[].value").to("example.arrays.values").map("my.other.array").to("example.arrays.valueArray");

    var actual = mapper.execute(source);

    var expected = {
      example: {
        basic: {
          value: "abc",
          object: { name: "john" }
        },
        arrays: {
          first: { value: 1 },
          items: [{ value: 1 }, { value: 2 }, { value: 3 }],
          values: [1, 2, 3],
          valueArray: [4, 5, 6]
        }
      }
    };

    _assert2.default.deepEqual(actual, expected);
  });
});
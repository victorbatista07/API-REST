"use strict";

var _lab = require("lab");

var Lab = _interopRequireWildcard(_lab);

var _notationSuite = require("./suites/notation-suite");

var _notationSuite2 = _interopRequireDefault(_notationSuite);

var _manyMappingsSuite = require("./suites/many-mappings-suite");

var _manyMappingsSuite2 = _interopRequireDefault(_manyMappingsSuite);

var _mappingSuite = require("./suites/mapping-suite");

var _mappingSuite2 = _interopRequireDefault(_mappingSuite);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var lab = exports.lab = Lab.script();

_notationSuite2.default.run(lab, {
  LABELS: ["arrays", "single mapping array"],
  GET_ITEM: "array.[].id",
  SET_ITEM: "array.levels.[].id",
  SOURCE: {
    array: [{ id: 1 }, { id: 2 }, { id: 3 }]
  },
  EXPECTED: {
    array: {
      levels: [{ id: 1 }, { id: 2 }, { id: 3 }]
    }
  },
  NO_SOURCE_EXPECTED: {},
  MODIFY_VALUE: "modified",
  MODIFIED_EXPECTED: {
    array: {
      levels: [{ id: "modified" }]
    }
  }
});

// size is missing from source
var labels = ["arrays", "mix of available and missing data"];
var mappings = [{ from: "propertySpaces.[].useType.parentCategory", to: "property.spaces.[].useTypeParentCategory" }, { from: "propertySpaces.[].size", to: "property.spaces.[].size" }];
var expected = {
  "property": {
    "spaces": [{
      "useTypeParentCategory": "Office"
    }]
  }
};
var source = {
  "propertySpaces": [{
    "useType": {
      "name": "Office",
      "sector": "Business (B1a)",
      "category": "Office",
      "parentCategory": "Office"
    }
  }]
};

// manyMappings.run(lab, {
//   LABELS: labels,
//   MAPPINGS: mappings,
//   SOURCE: source,
//   EXPECTED: expected,
//   EXPERIMENTAL: true
// });

_manyMappingsSuite2.default.run(lab, {
  LABELS: labels,
  MAPPINGS: mappings,
  SOURCE: source,
  EXPECTED: expected,
  EXPERIMENTAL: false
});

_mappingSuite2.default.run(lab, {
  LABELS: ["arrays", "all items in an array are undefined"],
  GET_ITEM: "unit.levels[].useType",
  SET_ITEM: "[].useType",
  SOURCE: {
    "unit": {
      "levels": [{
        "name": "notEmpty",
        "number": 10,
        "size": {
          "measurement": "SqM",
          "value": 122
        }
      }, {
        "name": "notEmpty2",
        "number": 12,
        "size": {
          "measurement": "SqM",
          "value": 142
        }
      }]
    }
  },
  EXPECTED: [],
  EXPERIMENTAL: false
});

_mappingSuite2.default.run(lab, {
  LABELS: ["arrays", "only some item in an array are undefined"],
  GET_ITEM: "unit.levels[].useType",
  SET_ITEM: "[].useType",
  SOURCE: {
    "unit": {
      "levels": [{
        "name": "notEmpty",
        "number": 10,
        "size": {
          "measurement": "SqM",
          "value": 122
        }
      }, {
        "name": "notEmpty",
        "number": 10,
        "size": {
          "measurement": "SqM",
          "value": 122
        },
        "useType": "notEmpty"
      }]
    }
  },
  EXPECTED: [null, { useType: "notEmpty" }],
  EXPERIMENTAL: false
});
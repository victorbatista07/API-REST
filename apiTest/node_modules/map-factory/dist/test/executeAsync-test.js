"use strict";

var _lab = require("lab");

var Lab = _interopRequireWildcard(_lab);

var _code = require("code");

var _lib = require("../lib");

var _lib2 = _interopRequireDefault(_lib);

var _labTesting = require("lab-testing");

var _labTesting2 = _interopRequireDefault(_labTesting);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var lab = exports.lab = Lab.script();

var testing = (0, _labTesting2.default)(lab);
var group = testing.createExperiment("interfaces");

var source = {
  "foo": "bar",
  "bar": "foo"
};
var expected = {
  "foo": "bar"
};
var mapper = void 0;

group("The executeAsync() method", function () {

  lab.beforeEach(function () {
    mapper = (0, _lib2.default)();
  });

  lab.experiment("when execute async is called from the mapper instance", function () {

    lab.test("should return a resolved promise with the desired result", function () {
      mapper.map("foo");
      mapper.executeAsync(source).then(function (actual) {
        (0, _code.expect)(actual).to.equal(expected);
      });
    });

    lab.test("should reject when an error is thrown", function () {
      mapper.map("foo");
      mapper.executeAsync(null).then(function () {

        (0, _code.fail)("unexpected success");
      }).catch(function (error) {
        (0, _code.expect)(error).to.be.an.error();
      });
    });
  });

  lab.experiment("when execute async is called from the default function", function () {

    lab.test("should return a resolved promise with the desired result", function () {
      mapper.map("foo").to("bar").executeAsync(source).then(function (actual) {
        (0, _code.expect)(actual).to.equal({ "bar": "bar" });
      });
    });
  });

  lab.experiment("when execute async is called from the chain", function () {

    lab.test("should return a resolved promise with the desired result", function () {
      mapper("foo").executeAsync(source).then(function (actual) {
        (0, _code.expect)(actual).to.equal(expected);
      });
    });
  });
});
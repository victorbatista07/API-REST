"use strict";

var _code = require("code");

var _lab = require("lab");

var Lab = _interopRequireWildcard(_lab);

var _labTesting = require("lab-testing");

var _labTesting2 = _interopRequireDefault(_labTesting);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var lab = exports.lab = Lab.script();
var testing = (0, _labTesting2.default)(lab);
var group = testing.createExperiment("map-factory");

var createMapper = require("../lib/index");

var _require = require("../lib/index"),
    getValue = _require.getValue,
    setValue = _require.setValue;

group("non-import compatibility", function () {

  lab.test("Can require the module", function () {

    var source = {
      "fieldName": "name1"
    };

    var expected = {
      "field": {
        "name": "name1"
      }
    };

    var map = createMapper();

    map("fieldName").to("field.name");

    var actual = map.execute(source);

    (0, _code.expect)(actual).to.equal(expected);
  });

  lab.test("each() method works from the index", function () {

    var source = [{
      "fieldName": "name1"
    }];

    var expected = [{
      "fieldName": "name1"
    }];

    var map = createMapper();

    var actual = map("fieldName").each(source);

    (0, _code.expect)(actual).to.equal(expected);
  });

  lab.test("getValue is exported", function () {

    (0, _code.expect)(getValue).to.be.a.function();
  });

  lab.test("setValue is exported", function () {

    (0, _code.expect)(setValue).to.be.a.function();
  });
});
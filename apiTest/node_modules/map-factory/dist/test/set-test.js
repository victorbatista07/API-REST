"use strict";

var _code = require("code");

var _lab = require("lab");

var Lab = _interopRequireWildcard(_lab);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var lab = exports.lab = Lab.script();

var createMapper = require("../lib/index");

lab.describe("The set() method", function () {
  lab.test("Set a field in the destination", function () {

    var expected = {
      "foo": "bar",
      "fooFunc": "bar"
    };

    var source = {};

    var mapper = createMapper();

    mapper.set("foo", "bar").set("fooFunc", function () {
      return "bar";
    });

    var result = mapper.execute(source);

    (0, _code.expect)(result).to.equal(expected);
  });

  lab.test("Set a field in the destination when combined with the map()", function () {

    var expected = {
      "foo": "bar",
      "fooFunc": "bar",
      "source": true
    };

    var source = { source: true };

    var mapper = createMapper();

    mapper.map().set("foo", "bar").set("fooFunc", function () {
      return "bar";
    });

    var result = mapper.execute(source);

    (0, _code.expect)(result).to.equal(expected);
  });

  lab.test("Should throw error when set field is called with a key of type other than string", function () {

    var mapper = createMapper();

    (0, _code.expect)(function () {
      return mapper.set(null, "bar");
    }).to.throw("the key must be a string");
  });
});
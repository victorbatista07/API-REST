"use strict";

var _code = require("code");

var _lab = require("lab");

var Lab = _interopRequireWildcard(_lab);

var _labTesting = require("lab-testing");

var _labTesting2 = _interopRequireDefault(_labTesting);

var _setKeyValue = require("../../lib/object-mapper/set-key-value");

var _setKeyValue2 = _interopRequireDefault(_setKeyValue);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var lab = exports.lab = Lab.script();
var testing = (0, _labTesting2.default)(lab);
var group = testing.createExperiment("raw methods");

group("The setValue() method", function () {

  lab.test("sets correct value and creates base object", function () {
    var key = "foo";
    var value = "bar";

    var expected = {
      foo: "bar"
    };

    var result = (0, _setKeyValue2.default)(null, key, value);

    (0, _code.expect)(result).to.equal(expected);
  });
  lab.test("sets correct value when base object is provided", function () {
    var key = "foo";
    var value = "bar";

    var base = {
      baz: "foo"
    };

    var expected = {
      baz: "foo",
      foo: "bar"
    };

    var result = (0, _setKeyValue2.default)(base, key, value);

    (0, _code.expect)(result).to.equal(expected);
  });
  lab.test("works correctly when the root key is an array", function () {
    var key = "[]";
    var value = "bar";

    var expected = ["bar"];

    var result = (0, _setKeyValue2.default)(null, key, value);

    (0, _code.expect)(result).to.equal(expected);
  });
  lab.test("simple array with base array", function () {
    var key = "[]";
    var value = "bar";

    var base = ["foo"];
    var expected = ["bar"];

    var result = (0, _setKeyValue2.default)(base, key, value);

    (0, _code.expect)(result).to.equal(expected);
  });
  lab.test("simple array in index 0", function () {
    var key = "[0]";
    var value = "bar";

    var expected = ["bar"];

    var result = (0, _setKeyValue2.default)(null, key, value);

    (0, _code.expect)(result).to.equal(expected);
  });
  lab.test("simple array in index 0 with base array", function () {
    var key = "[0]";
    var value = "bar";

    var base = ["foo"];
    var expected = ["bar"];

    var result = (0, _setKeyValue2.default)(base, key, value);

    (0, _code.expect)(result).to.equal(expected);
  });
  lab.test("simple array in index 1", function () {
    var key = "[1]";
    var value = "bar";

    var expected = [, "bar"];

    var result = (0, _setKeyValue2.default)(null, key, value);

    (0, _code.expect)(result).to.equal(expected);
  });

  lab.test("one level deep", function () {
    var key = "foo.bar";
    var value = "baz";

    var expected = {
      foo: {
        bar: "baz"
      }
    };

    var result = (0, _setKeyValue2.default)({}, key, value);

    (0, _code.expect)(result).to.equal(expected);
  });
  lab.test("object inside simple array", function () {
    var key = "[].foo";
    var value = "bar";

    var expected = [{
      foo: "bar"
    }];

    var result = (0, _setKeyValue2.default)(null, key, value);

    (0, _code.expect)(result).to.equal(expected);
  });
  lab.test("array to object inside simple array", function () {
    var key = "[].foo";
    var value = ["bar", "baz"];

    var expected = [{
      foo: "bar"
    }, {
      foo: "baz"
    }];

    var result = (0, _setKeyValue2.default)(null, key, value);

    (0, _code.expect)(result).to.equal(expected);
  });
  lab.test("object inside simple array defined index", function () {
    var key = "[3].foo";
    var value = "bar";

    var expected = [,,, {
      foo: "bar"
    }];

    var result = (0, _setKeyValue2.default)(null, key, value);

    (0, _code.expect)(result).to.equal(expected);
  });
  lab.test("two levels deep", function () {
    var key = "foo.bar.baz";
    var value = "foo";

    var expected = {
      foo: {
        bar: {
          baz: "foo"
        }
      }
    };

    var result = (0, _setKeyValue2.default)({}, key, value);

    (0, _code.expect)(result).to.equal(expected);
  });
  lab.test("one level deep inside array", function () {
    var key = "foo.bar[]";
    var value = "baz";

    var expected = {
      foo: {
        bar: ["baz"]
      }
    };

    var result = (0, _setKeyValue2.default)({}, key, value);

    (0, _code.expect)(result).to.equal(expected);
  });
  lab.test("one level deep inside array with one level deep", function () {
    var key = "foo.bar[].baz";
    var value = "foo";

    var expected = {
      foo: {
        bar: [{
          baz: "foo"
        }]
      }
    };

    var result = (0, _setKeyValue2.default)({}, key, value);

    (0, _code.expect)(result).to.equal(expected);
  });
  lab.test("one level deep inside array with one level deep inside a existing array", function () {
    var key = "foo.bar[].baz";
    var value = "foo";

    var base = {
      foo: {
        bar: [{
          bar: "baz"
        }]
      }
    };

    var expected = {
      foo: {
        bar: [{
          bar: "baz", baz: "foo"
        }]
      }
    };

    var result = (0, _setKeyValue2.default)(base, key, value);

    (0, _code.expect)(result).to.equal(expected);
  });
  lab.test("one level deep inside array at defined index with one level deep", function () {
    var key = "foo.bar[1].baz";
    var value = "foo";

    var expected = {
      foo: {
        bar: [, {
          baz: "foo"
        }]
      }
    };

    var result = (0, _setKeyValue2.default)({}, key, value);

    (0, _code.expect)(result).to.equal(expected);
  });
  lab.test("array to simple object", function () {
    var key = "foo[].baz";
    var value = ["foo", "const"];

    var expected = {
      foo: [{
        baz: "foo"
      }, {
        baz: "const"
      }]
    };

    var result = (0, _setKeyValue2.default)({}, key, value);

    (0, _code.expect)(result).to.equal(expected);
  });
  lab.test("array to two level object", function () {
    var key = "bar.foo[].baz";
    var value = ["foo", "const"];

    var expected = {
      bar: {
        foo: [{
          baz: "foo"
        }, {
          baz: "const"
        }]
      }
    };

    var result = (0, _setKeyValue2.default)({}, key, value);

    (0, _code.expect)(result).to.equal(expected);
  });
  lab.test("array to two level object", function () {
    var key = "bar.foo[].baz.foo";
    var value = ["foo", "const"];

    var expected = {
      bar: {
        foo: [{
          baz: {
            foo: "foo"
          }
        }, {
          baz: {
            foo: "const"
          }
        }]
      }
    };

    var result = (0, _setKeyValue2.default)({}, key, value);

    (0, _code.expect)(result).to.equal(expected);
  });
  lab.test("array to object", function () {

    var key = "one[].two[].three";
    var value = ["A", "B"];

    var expected = {
      one: [{
        two: [{
          three: "A"
        }, {
          three: "B"
        }]
      }]
    };

    var result = (0, _setKeyValue2.default)({}, key, value);

    (0, _code.expect)(result).to.equal(expected);
  });
  lab.test("array of arrays to object", function () {

    var key = "one[].two[].three";
    var value = [["A"], ["B"]];

    var expected = {
      one: [{
        two: [{
          three: "A"
        }]
      }, {
        two: [{
          three: "B"
        }]
      }]
    };

    var result = (0, _setKeyValue2.default)({}, key, value);

    (0, _code.expect)(result).to.equal(expected);
  });
  lab.test("crazy", function () {
    var key = "foo.bar[1].baz[2].thing";
    var value = "foo";

    var expected = {
      foo: {
        bar: [, {
          baz: [,, {
            thing: "foo"
          }]
        }]
      }
    };

    var result = (0, _setKeyValue2.default)({}, key, value);

    (0, _code.expect)(result).to.equal(expected);
  });
});
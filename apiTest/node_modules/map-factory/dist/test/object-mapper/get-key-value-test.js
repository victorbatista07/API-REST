"use strict";

var _code = require("code");

var _lab = require("lab");

var Lab = _interopRequireWildcard(_lab);

var _labTesting = require("lab-testing");

var _labTesting2 = _interopRequireDefault(_labTesting);

var _getKeyValue = require("../../lib/object-mapper/get-key-value");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var lab = exports.lab = Lab.script();
var testing = (0, _labTesting2.default)(lab);
var group = testing.createExperiment("raw methods");

group("The getValue() method", function () {

  lab.test("get value - simple", function () {
    var key = "foo";

    var obj = {
      "foo": "bar"
    };

    var expected = "bar";

    var result = (0, _getKeyValue.getValue)(obj, key);

    (0, _code.expect)(result).to.equal(expected);
  });
  lab.test("get value - one level deep", function () {
    var key = "foo.bar";

    var obj = {
      "foo": {
        "bar": "baz"
      }
    };

    var expected = "baz";

    var result = (0, _getKeyValue.getValue)(obj, key);

    (0, _code.expect)(result).to.equal(expected);
  });
  lab.test("get value - simple array", function () {
    var key = "[]";

    var obj = ["bar"];

    var expected = ["bar"];

    var result = (0, _getKeyValue.getValue)(obj, key);

    (0, _code.expect)(result).to.equal(expected);
  });
  lab.test("get value - simple array defined index", function () {
    var key = "[1]";

    var obj = ["foo", "bar"];

    var expected = "bar";

    var result = (0, _getKeyValue.getValue)(obj, key);

    (0, _code.expect)(result).to.equal(expected);
  });
  lab.test("get value - two levels deep", function () {
    var key = "foo.baz.fog";

    var obj = {
      "foo": {
        "baz": {
          "fog": "bar"
        }
      }
    };

    var expected = "bar";

    var result = (0, _getKeyValue.getValue)(obj, key);

    (0, _code.expect)(result).to.equal(expected);
  });
  lab.test("get value - one level deep and item is a array", function () {
    var key = "foo.baz[]";

    var obj = {
      "foo": {
        "baz": ["bar"]
      }
    };

    var expected = ["bar"];

    var result = (0, _getKeyValue.getValue)(obj, key);

    (0, _code.expect)(result).to.equal(expected);
  });
  lab.test("get value - one level deep and first item of array", function () {
    var key = "foo.baz[1]";

    var obj = {
      "foo": {
        "baz": ["bar", "foo"]
      }
    };

    var expected = "foo";

    var result = (0, _getKeyValue.getValue)(obj, key);

    (0, _code.expect)(result).to.equal(expected);
  });
  lab.test("get value - one level deep and array and one level", function () {
    var key = "foo.baz[].fog";

    var obj = {
      "foo": {
        "baz": [{
          "fog": "bar"
        }]
      }
    };

    var expected = ["bar"];

    var result = (0, _getKeyValue.getValue)(obj, key);

    (0, _code.expect)(result).to.equal(expected);
  });
  lab.test("get value - one level deep and first item of array and one level", function () {
    var key = "foo.baz[0].fog";

    var obj = {
      "foo": {
        "baz": [{
          "fog": "bar"
        }]
      }
    };

    var expected = "bar";

    var result = (0, _getKeyValue.getValue)(obj, key);

    (0, _code.expect)(result).to.equal(expected);
  });
  lab.test("get value - one level deep and first item of array and two levels", function () {
    var key = "foo.baz[0].fog.baz";

    var obj = {
      "foo": {
        "baz": [{
          "fog": {
            "baz": "bar"
          }
        }]
      }
    };

    var expected = "bar";

    var result = (0, _getKeyValue.getValue)(obj, key);

    (0, _code.expect)(result).to.equal(expected);
  });
  lab.test("get value - one level array", function () {
    var key = "foo[]";

    var obj = {
      "foo": [{
        "baz": [{
          "fog": {
            "baz": "bar"
          }
        }]
      }]
    };

    var expected = [{
      "baz": [{
        "fog": {
          "baz": "bar"
        }
      }]
    }];

    var result = (0, _getKeyValue.getValue)(obj, key);

    (0, _code.expect)(result).to.equal(expected);
  });
  lab.test("get value - two level deep array", function () {
    var key = "foo[].baz[].fog.baz";

    var obj = {
      "foo": [{
        "baz": [{
          "fog": {
            "baz": "bar"
          }
        }, {
          "fog": {
            "baz": "const"
          }
        }]
      }]
    };

    // Breaking change for V3 used to return ["bar", "const"]
    var expected = [["bar", "const"]];

    var result = (0, _getKeyValue.getValue)(obj, key);

    (0, _code.expect)(result).to.equal(expected);
  });
  lab.test("get value - crazy", function () {
    var key = "foo.baz[0].fog[1].baz";

    var obj = {
      "foo": {
        "baz": [{
          "fog": [, {
            "baz": "bar"
          }]
        }]
      }
    };

    var expected = "bar";

    var result = (0, _getKeyValue.getValue)(obj, key);

    (0, _code.expect)(result).to.equal(expected);
  });
  lab.test("getting an array item from a non-existent object", function () {
    var key = "fish[0].b";

    var obj = {
      "foo": {
        "baz": [{
          "fog": [, {
            "baz": "bar"
          }]
        }]
      }
    };

    var expected = void 0;

    var result = (0, _getKeyValue.getValue)(obj, key);

    (0, _code.expect)(result).to.equal(expected);
  });
});
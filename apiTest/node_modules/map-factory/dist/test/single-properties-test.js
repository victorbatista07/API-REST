"use strict";

var _lab = require("lab");

var Lab = _interopRequireWildcard(_lab);

var _notationSuite = require("./suites/notation-suite");

var _notationSuite2 = _interopRequireDefault(_notationSuite);

var _manyMappingsSuite = require("./suites/many-mappings-suite");

var _manyMappingsSuite2 = _interopRequireDefault(_manyMappingsSuite);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var lab = exports.lab = Lab.script();

_notationSuite2.default.run(lab, {
  LABELS: ["properties", "simple"],
  GET_ITEM: "fieldName",
  SET_ITEM: "name",
  SOURCE: {
    fieldName: "my name"
  },
  EXPECTED: {
    name: "my name"
  },
  NO_SOURCE_EXPECTED: {},
  MODIFY_VALUE: "modified",
  MODIFIED_EXPECTED: {
    name: "modified"
  }
});

// The source does not contain all the required data
var labels = ["properties", "simple", "mix of available and missing data"];
var mappings = [{ from: "propertyCategory", to: "category" }, { from: "propertySize", to: "size" }];
var source = {
  "propertyCategory": "Office"
};
var expected = {
  "category": "Office"
};

// manyMappings.run(lab, {
//   LABELS: labels,
//   MAPPINGS: mappings,
//   SOURCE: source,
//   EXPECTED: expected,
//   EXPERIMENTAL: true
// });

_manyMappingsSuite2.default.run(lab, {
  LABELS: labels,
  MAPPINGS: mappings,
  SOURCE: source,
  EXPECTED: expected,
  EXPERIMENTAL: false
});
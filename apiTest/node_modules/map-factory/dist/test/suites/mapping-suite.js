"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _code = require("code");

var _labTesting = require("lab-testing");

var _labTesting2 = _interopRequireDefault(_labTesting);

var _labSuite = require("lab-suite");

var labSuite = _interopRequireWildcard(_labSuite);

var _mapFactory = require("../../lib/map-factory");

var _mapFactory2 = _interopRequireDefault(_mapFactory);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var suite = labSuite.create();

suite.expect("LABELS").to.be.an.array();
suite.expect("GET_ITEM").to.be.a.string();
suite.expect("SET_ITEM").to.be.a.string();
suite.expect("SOURCE").to.be.an.object();
suite.expect("EXPECTED").to.be.anything();
suite.expect("EXPERIMENTAL").to.be.a.boolean();

suite.declare(function (lab, variables) {
  var LABELS = variables.LABELS,
      GET_ITEM = variables.GET_ITEM,
      SET_ITEM = variables.SET_ITEM,
      SOURCE = variables.SOURCE,
      EXPECTED = variables.EXPECTED,
      EXPERIMENTAL = variables.EXPERIMENTAL;


  var testing = (0, _labTesting2.default)(lab);
  var group = testing.createExperiment.apply(testing, _toConsumableArray(LABELS));

  function createSut() {
    return (0, _mapFactory2.default)({ experimental: EXPERIMENTAL });
  }

  // const experimentalLabel = EXPERIMENTAL === true ? "in experimental mode" : "in normal mode";

  group("when the source exists", function () {

    // lab.experiment(experimentalLabel, () => {

    lab.test("a string source can be selected and mapped to the target without a transform", function () {

      var mapper = createSut();

      var actual = mapper.map(GET_ITEM).to(SET_ITEM).execute(SOURCE);

      (0, _code.expect)(actual).to.equal(EXPECTED);
    });

    lab.test("a string source can be selected and mapped to the target with a transform", function () {

      var mapper = createSut();

      var actual = mapper.map(GET_ITEM).to(SET_ITEM, function (value) {
        return value;
      }).execute(SOURCE);

      (0, _code.expect)(actual).to.equal(EXPECTED);
    });

    lab.test("an array source can be selected and mapped to the target", function () {

      var mapper = createSut();

      var actual = mapper.map([GET_ITEM]).to(SET_ITEM, function (value) {
        return value;
      }).execute(SOURCE);

      (0, _code.expect)(actual).to.equal(EXPECTED);
    });
  });

  // });
});

exports.default = suite;
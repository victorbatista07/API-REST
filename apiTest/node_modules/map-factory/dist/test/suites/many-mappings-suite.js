"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _code = require("code");

var _labTesting = require("lab-testing");

var _labTesting2 = _interopRequireDefault(_labTesting);

var _labSuite = require("lab-suite");

var labSuite = _interopRequireWildcard(_labSuite);

var _mapFactory = require("../../lib/map-factory");

var _mapFactory2 = _interopRequireDefault(_mapFactory);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var suite = labSuite.create();

suite.expect("LABELS").to.be.an.array();
suite.expect("MAPPINGS").to.be.an.array();
suite.expect("SOURCE").to.be.an.object().or.an.array();
suite.expect("EXPECTED").to.be.an.object().or.an.array();
// suite.expect("EXPERIMENTAL").to.be.a.boolean();

suite.declare(function (lab, variables) {
  var LABELS = variables.LABELS,
      MAPPINGS = variables.MAPPINGS,
      SOURCE = variables.SOURCE,
      EXPECTED = variables.EXPECTED,
      EXPERIMENTAL = variables.EXPERIMENTAL;


  var testing = (0, _labTesting2.default)(lab);
  var group = testing.createExperiment.apply(testing, _toConsumableArray(LABELS));

  function createSut() {
    return (0, _mapFactory2.default)({ experimental: EXPERIMENTAL });
  }

  // const experimentalLabel = EXPERIMENTAL === true ? "in experimental mode" : "in normal mode";

  group("when the source exists", function () {

    // lab.experiment(experimentalLabel, () => {

    lab.test("source values can be mapped to the target without a transform", function () {

      var map = createSut();

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = MAPPINGS[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var item = _step.value;

          map(item.from).to(item.to);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      var actual = map.execute(SOURCE);

      (0, _code.expect)(actual).to.equal(EXPECTED);
    });

    lab.test("source values can be mapped to the target with a transform", function () {

      var map = createSut();

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = MAPPINGS[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var item = _step2.value;

          map(item.from).to(item.to, function (value) {
            return value;
          });
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      var actual = map.execute(SOURCE);
      (0, _code.expect)(actual).to.equal(EXPECTED);
    });

    lab.test("source values can be mapped to the target in multi-mode", function () {

      var map = createSut();

      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = MAPPINGS[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var item = _step3.value;

          map([item.from]).to(item.to, function (value) {
            return value;
          });
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      var actual = map.execute(SOURCE);

      (0, _code.expect)(actual).to.equal(EXPECTED);
    });
  });
});

exports.default = suite;
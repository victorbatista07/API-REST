"use strict";

var _code = require("code");

var _lab = require("lab");

var Lab = _interopRequireWildcard(_lab);

var _labTesting = require("lab-testing");

var _labTesting2 = _interopRequireDefault(_labTesting);

var _manyMappingsSuite = require("./suites/many-mappings-suite");

var _manyMappingsSuite2 = _interopRequireDefault(_manyMappingsSuite);

var _lib = require("../lib");

var _lib2 = _interopRequireDefault(_lib);

var _lodash = require("lodash.flattendeep");

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var lab = exports.lab = Lab.script();
var testing = (0, _labTesting2.default)(lab);
var group = testing.createExperiment("arrays", "array of arrays");

var groups = ["arrays", "array of arrays"];

group("when mapping from a larger to a small array", function () {

  var src = {
    one: [{
      two: [{ three: [{ value: "A" }, { value: "B" }] }, { three: [{ value: "C" }, { value: "D" }] }]
    }, {
      two: [{ three: [{ value: "A1" }, { value: "B1" }] }, { three: [{ value: "C1" }, { value: "D1" }] }]
    }]
  };

  var expected = {
    one: [{ two: [{ value: "A" }, { value: "B" }, { value: "C" }, { value: "D" }] }, { two: [{ value: "A1" }, { value: "B1" }, { value: "C1" }, { value: "D1" }] }]
  };

  lab.test("or() mode works when the first get fails", function () {

    var mapper = (0, _lib2.default)();

    var actual = mapper.map("fish").or("one[].two[].three[].value").to("one[].two[].value").execute(src);

    (0, _code.expect)(actual).to.equal(expected);
  });

  lab.test("or() mode works when the second get succeeds", function () {

    var mapper = (0, _lib2.default)();

    var actual = mapper.map("one[].two[].three[].value").or("fish").to("one[].two[].value").execute(src);

    (0, _code.expect)(actual).to.equal(expected);
  });

  lab.test("missing data works as expected", function () {

    var emptySource = {
      one: [{ two: [{ three: [] }, { three: [] }, { three: null }, undefined, null] }]
    };

    var mapper = (0, _lib2.default)();

    var actual = mapper.map("one[].two[].three[]").to("one[].two[]").execute(emptySource);

    (0, _code.expect)(actual).to.equal({});
  });
});

group("with the flattenInverted option == true", function () {

  var src = [{
    one: [{ name: "first", two: [{ value: "A" }, { value: "B" }] }, { name: "second", two: [{ value: "C" }, { value: "D" }] }]
  }, {
    one: [{ name: "third", two: [{ value: "E" }, { value: "F" }] }, { name: "fourth", two: [{ value: "G" }, { value: "H" }] }]
  }];

  lab.test("a single level flatten works correctly", function () {

    var mapper = (0, _lib2.default)();

    var expected = [{ name: "first", values: ["A", "B"] }, { name: "second", values: ["C", "D"] }, { name: "third", values: ["E", "F"] }, { name: "fourth", values: ["G", "H"] }];

    var options = { flattenInverted: true };
    mapper.map("[].one[].name").to("[].name").map("[].one[].two[].value").with(options).to("[].values[]");

    var actual = mapper.execute(src);
    (0, _code.expect)(actual).to.equal(expected);
  });

  lab.test("a two level flatting works correctly", function () {

    var mapper = (0, _lib2.default)();

    // The result whether flattened normally or inverted is the same
    var expected = ["A", "B", "C", "D", "E", "F", "G", "H"];

    var options = { flattenInverted: true };

    mapper.map("[].one[].two[].value").with(options).to("[]");

    var actual = mapper.execute(src);
    (0, _code.expect)(actual).to.equal(expected);
  });
});

group("with the flatten option == false", function () {

  lab.test("a two level flatting works correctly", function () {

    var mapper = (0, _lib2.default)();
    var src = [{
      one: [{ name: "first", two: [{ value: "A" }, { value: "B" }] }, { name: "second", two: [{ value: "C" }, { value: "D" }] }]
    }, {
      one: [{ name: "third", two: [{ value: "E" }, { value: "F" }] }, { name: "fourth", two: [{ value: "G" }, { value: "H" }] }]
    }];

    // The result whether flattened normally or inverted is the same
    var expected = [[["A", "B"], ["C", "D"]], [["E", "F"], ["G", "H"]]];

    var options = { flatten: false };

    mapper.map("[].one[].two[].value").with(options).to("[]");

    var actual = mapper.execute(src);
    (0, _code.expect)(actual).to.equal(expected);
  });
});

group("in multi-mode with array of arrays", function () {

  lab.test("array flattening is not applied", function () {

    var src = {
      one: [{
        two: [{ three: [{ value: "A" }, { value: "B" }] }, { three: [{ value: "C" }, { value: "D" }] }]
      }, {
        two: [{ three: [{ value: "A1" }, { value: "B1" }] }, { three: [{ value: "C1" }, { value: "D1" }] }]
      }]
    };

    var expected = {
      result: [[["A", "B"], ["C", "D"]], [["A1", "B1"], ["C1", "D1"]]]
    };

    var mapper = (0, _lib2.default)();

    var actual = mapper.map(["one[].two[].three[].value"]).to("result", function (item) {
      return item;
    }).execute(src);

    (0, _code.expect)(actual).to.equal(expected);
  });
});

var valueToValueTests = [{
  NAME: "1 level to 2 levels",
  SOURCE: {
    one: [{ value: "A" }, { value: "B" }]
  },
  EXPECTED: {
    one: [{ two: [{ value: "A" }, { value: "B" }] }]
  },
  MAPPINGS: [{
    from: "one[].value",
    to: "one[].two[].value"
  }]
}, {
  NAME: "2 levels to 1 level",
  SOURCE: {
    one: [{ two: [{ value: "A" }, { value: "B" }] }, { two: [{ value: "C" }, { value: "D" }] }]
  },
  EXPECTED: {
    one: [{ value: "A" }, { value: "B" }, { value: "C" }, { value: "D" }]
  },
  MAPPINGS: [{
    from: "one[].two[].value",
    to: "one[].value"
  }]
}, {
  NAME: "2 levels to 2 levels",
  SOURCE: {
    one: [{ two: [{ value: "A" }, { value: "B" }] }, { two: [{ value: "C" }, { value: "D" }] }]
  },
  EXPECTED: {
    one: [{ two: [{ value: "A" }, { value: "B" }] }, { two: [{ value: "C" }, { value: "D" }] }]
  },
  MAPPINGS: [{
    from: "one[].two[].value",
    to: "one[].two[].value"
  }]
}, {
  NAME: "2 level to 3 levels",
  SOURCE: {
    one: [{ two: [{ value: "A" }, { value: "B" }] }, { two: [{ value: "C" }, { value: "D" }] }]
  },
  EXPECTED: {
    one: [{
      two: [{ three: [{ value: "A" }, { value: "B" }] }]
    }, {
      two: [{ three: [{ value: "C" }, { value: "D" }] }]
    }]
  },
  MAPPINGS: [{
    from: "one[].two[].value",
    to: "one[].two[].three[].value"
  }]
}, {
  NAME: "3 level to 2 levels",
  SOURCE: {
    one: [{
      two: [{ three: [{ value: "A" }, { value: "B" }] }, { three: [{ value: "C" }, { value: "D" }] }]
    }, {
      two: [{ three: [{ value: "A1" }, { value: "B1" }] }, { three: [{ value: "C1" }, { value: "D1" }] }]
    }]
  },
  EXPECTED: {
    one: [{ two: [{ value: "A" }, { value: "B" }, { value: "C" }, { value: "D" }] }, { two: [{ value: "A1" }, { value: "B1" }, { value: "C1" }, { value: "D1" }] }]
  },
  MAPPINGS: [{
    from: "one[].two[].three[].value",
    to: "one[].two[].value"
  }]
}, {
  NAME: "3 level to 1 levels",
  SOURCE: {
    one: [{
      two: [{ three: [{ value: "A" }, { value: "B" }] }, { three: [{ value: "C" }, { value: "D" }] }]
    }, {
      two: [{ three: [{ value: "A1" }, { value: "B1" }] }, { three: [{ value: "C1" }, { value: "D1" }] }]
    }]
  },
  EXPECTED: {
    one: [{ value: "A" }, { value: "B" }, { value: "C" }, { value: "D" }, { value: "A1" }, { value: "B1" }, { value: "C1" }, { value: "D1" }]
  },
  MAPPINGS: [{
    from: "one[].two[].three[].value",
    to: "one[].value"
  }]
}];

valueToValueTests.map(function (_ref) {
  var NAME = _ref.NAME,
      SOURCE = _ref.SOURCE,
      EXPECTED = _ref.EXPECTED,
      MAPPINGS = _ref.MAPPINGS;


  var labels = (0, _lodash2.default)([groups, ["with value source and value target", NAME]]);

  _manyMappingsSuite2.default.run(lab, {
    LABELS: labels, SOURCE: SOURCE, EXPECTED: EXPECTED, MAPPINGS: MAPPINGS, MULTI_MODE: false
  });
});

var valueToArrayTests = [{
  NAME: "1 level to 2 levels",
  SOURCE: {
    one: [{ value: "A" }, { value: "B" }]
  },
  EXPECTED: {
    one: [{ two: ["A", "B"] }]
  },
  MAPPINGS: [{
    from: "one[].value",
    to: "one[].two[]"
  }]
}, {
  NAME: "2 levels to 1 levels",
  SOURCE: {
    one: [{ two: [{ value: "A" }, { value: "B" }] }, { two: [{ value: "C" }, { value: "D" }] }]
  },
  EXPECTED: {
    one: ["A", "B", "C", "D"]
  },
  MAPPINGS: [{
    from: "one[].two[].value",
    to: "one[]"
  }]
}, {
  NAME: "2 levels to 2 levels",
  SOURCE: {
    one: [{ two: [{ value: "A" }, { value: "B" }] }, { two: [{ value: "C" }, { value: "D" }] }]
  },
  EXPECTED: {
    one: [{ two: ["A", "B"] }, { two: ["C", "D"] }]
  },
  MAPPINGS: [{
    from: "one[].two[].value",
    to: "one[].two[]"
  }]
}, {
  NAME: "2 level to 3 levels",
  SOURCE: {
    one: [{ two: [{ value: "A" }, { value: "B" }] }, { two: [{ value: "C" }, { value: "D" }] }]
  },
  EXPECTED: {
    one: [{
      two: [{ three: ["A", "B"] }]
    }, {
      two: [{ three: ["C", "D"] }]
    }]
  },
  MAPPINGS: [{
    from: "one[].two[].value",
    to: "one[].two[].three[]"
  }]
}, {
  NAME: "3 level to 2 levels",
  SOURCE: {
    one: [{
      two: [{ three: [{ value: "A" }, { value: "B" }] }, { three: [{ value: "C" }, { value: "D" }] }]
    }, {
      two: [{ three: [{ value: "A1" }, { value: "B1" }] }, { three: [{ value: "C1" }, { value: "D1" }] }]
    }]
  },
  EXPECTED: {
    one: [{ two: ["A", "B", "C", "D"] }, { two: ["A1", "B1", "C1", "D1"] }]
  },
  MAPPINGS: [{
    from: "one[].two[].three[].value",
    to: "one[].two[]"
  }]
}, {
  NAME: "3 level to 1 level",
  SOURCE: {
    one: [{
      two: [{ three: [{ value: "A" }, { value: "B" }] }, { three: [{ value: "C" }, { value: "D" }] }]
    }, {
      two: [{ three: [{ value: "A1" }, { value: "B1" }] }, { three: [{ value: "C1" }, { value: "D1" }] }]
    }]
  },
  EXPECTED: {
    one: ["A", "B", "C", "D", "A1", "B1", "C1", "D1"]
  },
  MAPPINGS: [{
    from: "one[].two[].three[].value",
    to: "one[]"
  }]
}, {
  NAME: "3 level to 0 level",
  SOURCE: {
    one: [{
      two: [{ three: [{ value: "A" }, { value: "B" }] }, { three: [{ value: "C" }, { value: "D" }] }]
    }, {
      two: [{ three: [{ value: "A1" }, { value: "B1" }] }, { three: [{ value: "C1" }, { value: "D1" }] }]
    }]
  },
  EXPECTED: ["A", "B", "C", "D", "A1", "B1", "C1", "D1"],
  MAPPINGS: [{
    from: "one[].two[].three[].value",
    to: "[]"
  }]
}];

valueToArrayTests.map(function (_ref2) {
  var NAME = _ref2.NAME,
      SOURCE = _ref2.SOURCE,
      EXPECTED = _ref2.EXPECTED,
      MAPPINGS = _ref2.MAPPINGS;


  var labels = (0, _lodash2.default)([groups, ["with value source and with array target", NAME]]);
  _manyMappingsSuite2.default.run(lab, {
    LABELS: labels, SOURCE: SOURCE, EXPECTED: EXPECTED, MAPPINGS: MAPPINGS, MULTI_MODE: false
  });
});

var arrayToValueTests = [{
  NAME: "1 level to 2 levels",
  SOURCE: {
    one: ["A", "B"]
  },
  EXPECTED: {
    one: [{ two: [{ value: "A" }, { value: "B" }] }]
  },
  MAPPINGS: [{
    from: "one[]",
    to: "one[].two[].value"
  }]
}, {
  NAME: "2 levels to 1 level",
  SOURCE: {
    one: [{ two: ["A", "B"] }, { two: ["C", "D"] }]
  },
  EXPECTED: {
    one: [{ value: "A" }, { value: "B" }, { value: "C" }, { value: "D" }]
  },
  MAPPINGS: [{
    from: "one[].two[]",
    to: "one[].value"
  }]
}, {
  NAME: "2 levels to 2 levels",
  SOURCE: {
    one: [{ two: ["A", "B"] }, { two: ["C", "D"] }]
  },
  EXPECTED: {
    one: [{ two: [{ value: "A" }, { value: "B" }] }, { two: [{ value: "C" }, { value: "D" }] }]
  },
  MAPPINGS: [{
    from: "one[].two[]",
    to: "one[].two[].value"
  }]
}, {
  NAME: "2 level to 3 levels",
  SOURCE: {
    one: [{ two: ["A", "B"] }, { two: ["C", "D"] }]
  },
  EXPECTED: {
    one: [{
      two: [{ three: [{ value: "A" }, { value: "B" }] }]
    }, {
      two: [{ three: [{ value: "C" }, { value: "D" }] }]
    }]
  },
  MAPPINGS: [{
    from: "one[].two[]",
    to: "one[].two[].three[].value"
  }]
}, {
  NAME: "3 level to 2 levels",
  SOURCE: {
    one: [{
      two: [{ three: ["A", "B"] }, { three: ["C", "D"] }]
    }, {
      two: [{ three: ["A1", "B1"] }, { three: ["C1", "D1"] }]
    }]
  },
  EXPECTED: {
    one: [{ two: [{ value: "A" }, { value: "B" }, { value: "C" }, { value: "D" }] }, { two: [{ value: "A1" }, { value: "B1" }, { value: "C1" }, { value: "D1" }] }]
  },
  MAPPINGS: [{
    from: "one[].two[].three[]",
    to: "one[].two[].value"
  }]
}, {
  NAME: "3 level to 1 levels",
  SOURCE: {
    one: [{
      two: [{ three: ["A", "B"] }, { three: ["C", "D"] }]
    }, {
      two: [{ three: ["A1", "B1"] }, { three: ["C1", "D1"] }]
    }]
  },
  EXPECTED: {
    one: [{ value: "A" }, { value: "B" }, { value: "C" }, { value: "D" }, { value: "A1" }, { value: "B1" }, { value: "C1" }, { value: "D1" }]
  },
  MAPPINGS: [{
    from: "one[].two[].three[]",
    to: "one[].value"
  }]
}];

arrayToValueTests.map(function (_ref3) {
  var NAME = _ref3.NAME,
      SOURCE = _ref3.SOURCE,
      EXPECTED = _ref3.EXPECTED,
      MAPPINGS = _ref3.MAPPINGS;


  var labels = (0, _lodash2.default)([groups, ["with array source and value target", NAME]]);

  _manyMappingsSuite2.default.run(lab, {
    LABELS: labels, SOURCE: SOURCE, EXPECTED: EXPECTED, MAPPINGS: MAPPINGS, MULTI_MODE: false
  });
});

var arrayToArrayTests = [{
  NAME: "1 level to 2 levels",
  SOURCE: {
    one: ["A", "B"]
  },
  EXPECTED: {
    one: [{ two: ["A", "B"] }]
  },
  MAPPINGS: [{
    from: "one[]",
    to: "one[].two[]"
  }]
}, {
  NAME: "2 levels to 1 levels",
  SOURCE: {
    one: [{ two: ["A", "B"] }, { two: ["C", "D"] }]
  },
  EXPECTED: {
    one: ["A", "B", "C", "D"]
  },
  MAPPINGS: [{
    from: "one[].two[]",
    to: "one[]"
  }]
}, {
  NAME: "2 levels to 2 levels",
  SOURCE: {
    one: [{ two: ["A", "B"] }, { two: ["C", "D"] }]
  },
  EXPECTED: {
    one: [{ two: ["A", "B"] }, { two: ["C", "D"] }]
  },
  MAPPINGS: [{
    from: "one[].two[]",
    to: "one[].two[]"
  }]
}, {
  NAME: "2 level to 3 levels",
  SOURCE: {
    one: [{ two: ["A", "B"] }, { two: ["C", "D"] }]
  },
  EXPECTED: {
    one: [{
      two: [{ three: ["A", "B"] }]
    }, {
      two: [{ three: ["C", "D"] }]
    }]
  },
  MAPPINGS: [{
    from: "one[].two[]",
    to: "one[].two[].three[]"
  }]
}, {
  NAME: "3 level to 2 levels",
  SOURCE: {
    one: [{
      two: [{ three: ["A", "B"] }, { three: ["C", "D"] }]
    }, {
      two: [{ three: ["A1", "B1"] }, { three: ["C1", "D1"] }]
    }]
  },
  EXPECTED: {
    one: [{ two: ["A", "B", "C", "D"] }, { two: ["A1", "B1", "C1", "D1"] }]
  },
  MAPPINGS: [{
    from: "one[].two[].three[]",
    to: "one[].two[]"
  }]
}, {
  NAME: "3 level to 1 level",
  SOURCE: {
    one: [{
      two: [{ three: ["A", "B"] }, { three: ["C", "D"] }]
    }, {
      two: [{ three: ["A1", "B1"] }, { three: ["C1", "D1"] }]
    }]
  },
  EXPECTED: {
    one: ["A", "B", "C", "D", "A1", "B1", "C1", "D1"]
  },
  MAPPINGS: [{
    from: "one[].two[].three[]",
    to: "one[]"
  }]
}];

arrayToArrayTests.map(function (_ref4) {
  var NAME = _ref4.NAME,
      SOURCE = _ref4.SOURCE,
      EXPECTED = _ref4.EXPECTED,
      MAPPINGS = _ref4.MAPPINGS;


  var labels = (0, _lodash2.default)([groups, ["with array source and with array target", NAME]]);

  _manyMappingsSuite2.default.run(lab, {
    LABELS: labels, SOURCE: SOURCE, EXPECTED: EXPECTED, MAPPINGS: MAPPINGS, MULTI_MODE: false
  });
});

// Data for parent and child tests
var source = {
  foo: [{ "name": "a", "things": ["a1", "a2"] }, { "name": "b", "things": ["b1", "b2"] }]
};

var expected = {
  bar: [{
    label: "a",
    values: ["a1", "a2"]
  }, {
    label: "b",
    values: ["b1", "b2"]
  }]
};

_manyMappingsSuite2.default.run(lab, {
  LABELS: ["arrays", "array of arrays", "parent and child - normal order"],
  MAPPINGS: [{ from: "foo[].name", to: "bar[].label" }, { from: "foo[].things[]", to: "bar[].values[]" }],
  SOURCE: source,
  EXPECTED: expected
});

_manyMappingsSuite2.default.run(lab, {
  LABELS: ["arrays", "array of arrays", "parent and child - inverted order"],
  MAPPINGS: [{ from: "foo[].things[]", to: "bar[].values[]" }, { from: "foo[].name", to: "bar[].label" }],
  SOURCE: source,
  EXPECTED: expected
});